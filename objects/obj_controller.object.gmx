<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
  the_balls = ds_list_create();
  
  for(var i=0; i&lt;10; i++){
    ds_list_add(the_balls, instance_create(0,0,obj_ball));
  }

  coll_circle = "";
  coll_hor = "";
  coll_vert = "";
  coll_ball = -1;
  
  randomize();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
  var half = (obj_ball.sprite_width/2);
  var xpos = irandom(room_width - obj_ball.sprite_width) + half;

  if(drop_point_available(xpos, obj_ball)){
    var the_ball = pool_fetch_ball(obj_controller.the_balls);
    drop_ball(xpos, the_ball);
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
  var x1, y1, x2, y2, radius;
  var parts;
  var c_orig = draw_get_colour();

  if(obj_controller.coll_rect_hor != ""){

    parts = string_split(obj_controller.coll_rect_hor, ":");
    x1           = real(ds_list_find_value(parts, 0));
    y1           = real(ds_list_find_value(parts, 1));
    x2           = real(ds_list_find_value(parts, 2));
    y2           = real(ds_list_find_value(parts, 3));
    coll_state   = real(ds_list_find_value(parts, 4));

    draw_set_colour(c_purple);
    draw_rectangle(x1, y1, x2, y2, (coll_state == 0));
    //show_message(obj_controller.coll_rect_hor);
  }

  if(obj_controller.coll_rect_vert != ""){

    parts = string_split(obj_controller.coll_rect_vert, ":");
    x1           = real(ds_list_find_value(parts, 0));
    y1           = real(ds_list_find_value(parts, 1));
    x2           = real(ds_list_find_value(parts, 2));
    y2           = real(ds_list_find_value(parts, 3));
    coll_state   = real(ds_list_find_value(parts, 4));

    draw_set_colour(c_green);
    draw_rectangle(x1, y1, x2, y2, (coll_state == 0));
    //show_message(obj_controller.coll_rect_vert);
  }

  if(obj_controller.coll_circle != ""){

    parts = string_split(obj_controller.coll_circle, ":");
    x1           = real(ds_list_find_value(parts, 0));
    y1           = real(ds_list_find_value(parts, 1));
    radius       = real(ds_list_find_value(parts, 2));
    coll_state   = real(ds_list_find_value(parts, 3));

    draw_set_colour(c_orange);
    draw_circle(x1, y1, radius, (coll_state == 0));
    //show_message(obj_controller.coll_circle);
  }

  draw_set_colour(c_orig);


  var cnt = 0;
  var cnt_inactive = 0;
  with(obj_ball){
    if(active){ cnt += 1; }
    else{ cnt_inactive += 1; }
  }
  draw_text(room_width - 200, room_height - 50, "active balls = " + string(cnt));
  draw_text(room_width - 200, room_height - 60, "inactive balls = " + string(cnt_inactive));
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
